def getkmerDic(myreads, k):
    kmer_dic = {}
    kmer = ''
    i = 0
    j = 0
    key_list = []
    val_list = []
    while i < len(myreads):
        start = 0
        for j in range(start, len(myreads[i])-k):
            kmer = myreads[i][start:start+k]
            if 'kmer' in kmer_dic:
                kmer_dic['kmer'].add([myreads[i]])
            else:
                kmer_dic.update({kmer:set([myreads[i]])})
            start +=1
        i +=1
    key_list = list(kmer_dic.keys())
    val_list = list(kmer_dic.values())
    return kmer_dic, key_list, val_list

def overlap(a, b, min_length=3):
    start = 0
    '''return length of longest suffix of 'a' matching a prefix of 'b' that is at least 'min_length' characters long. if no such overlap exists, return 0. '''
    while True:
        start = a.find(b[:min_length], start)
        if start == -1:
            return 0
        if b.startswith(a[start:]):
            return len(a)-start
        start +=1

from itertools import permutations
#list(permutations([1,2,3], 2))

def naive_overlap_map(reads, k):
    olaps = {}
    for a,b in permutations(reads, 2):
        olen = overlap(a, b, min_length=k)
        if olen > 0:
            olaps[(a,b)] = olen
    return olaps

reads = ['ACGGATGATC', 'GATCAAGT', 'TTCACGGA']
print(naive_overlap_map(reads, 3))

def overlap_all_pairs(myreads, k=30, km=3):
    i = 0
    j = 0
    olaps_list = {}
    kmer_dic, key_list, val_list = getkmerDic(myreads, km)    
    for i in range(len(myreads)):
        kmer_suffix = reads[i][-k:]
        start = 0
        for j in range(start, len(key_list)):
            if key_list[j] in kmer_suffix:
                olaps = naive_overlap_map(val_list[j], k)
                olaps_list.update(olaps)
            start +=1
    return olaps_list

reads = ['ACGGATGATCGATCAAGT', 'GATCAAGTATCCGAAGCT', 'TTCACGGAGATCAAGT']
test = overlap_all_pairs(reads, 6, 3)
print(test)
